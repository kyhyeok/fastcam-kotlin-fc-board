<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.fastcompus.fcboard.service.CommentServiceTest" tests="5" skipped="0" failures="0" errors="0" timestamp="2024-12-02T01:26:58" hostname="gim-yunhyeog-ui-MacBookPro.local" time="0.655">
  <properties/>
  <testcase name="Then: 정상 생성됨을 확인한다." classname="com.fastcompus.fcboard.service.CommentServiceTest" time="0.094"/>
  <testcase name="Then: 게시글 존재하지 않음 예외가 발생한다." classname="com.fastcompus.fcboard.service.CommentServiceTest" time="0.046"/>
  <testcase name="Then: 수정할 수 없는 게시물 예외가 발생한다." classname="com.fastcompus.fcboard.service.CommentServiceTest" time="0.043"/>
  <testcase name="Then: 정상 삭제됨을 확인한다." classname="com.fastcompus.fcboard.service.CommentServiceTest" time="0.049"/>
  <testcase name="Then: 삭제할 수 없는 댓글 예외가 발생한다,." classname="com.fastcompus.fcboard.service.CommentServiceTest" time="0.044"/>
  <system-out><![CDATA[10:26:55.666 [Test worker @coroutine#2] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.fastcompus.fcboard.service.CommentServiceTest]: CommentServiceTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
10:26:55.719 [Test worker @coroutine#2] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.fastcompus.fcboard.FcBoardApplication for test class com.fastcompus.fcboard.service.CommentServiceTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.1.3)

2024-12-02T10:26:55.892+09:00  INFO 52387 --- [er @coroutine#2] c.f.fcboard.service.CommentServiceTest   : Starting CommentServiceTest using Java 17.0.13 with PID 52387 (started by kimyoonhyeok in /Users/kimyoonhyeok/java/fastcam-kotlin-fc-board)
2024-12-02T10:26:55.892+09:00  INFO 52387 --- [er @coroutine#2] c.f.fcboard.service.CommentServiceTest   : The following 1 profile is active: "dev"
2024-12-02T10:26:56.230+09:00  INFO 52387 --- [er @coroutine#2] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-12-02T10:26:56.264+09:00  INFO 52387 --- [er @coroutine#2] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 30 ms. Found 2 JPA repository interfaces.
2024-12-02T10:26:56.439+09:00  INFO 52387 --- [er @coroutine#2] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-12-02T10:26:56.460+09:00  INFO 52387 --- [er @coroutine#2] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.2.7.Final
2024-12-02T10:26:56.461+09:00  INFO 52387 --- [er @coroutine#2] org.hibernate.cfg.Environment            : HHH000406: Using bytecode reflection optimizer
2024-12-02T10:26:56.523+09:00  INFO 52387 --- [er @coroutine#2] o.h.b.i.BytecodeProviderInitiator        : HHH000021: Bytecode provider name : bytebuddy
2024-12-02T10:26:56.581+09:00  INFO 52387 --- [er @coroutine#2] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-12-02T10:26:56.589+09:00  INFO 52387 --- [er @coroutine#2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-12-02T10:26:56.591+09:00  WARN 52387 --- [er @coroutine#2] c.zaxxer.hikari.util.DriverDataSource    : Registered driver with driverClassName=com.mysql.jdbc.Driver was not found, trying direct instantiation.
2024-12-02T10:26:56.833+09:00  INFO 52387 --- [er @coroutine#2] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3ff53704
2024-12-02T10:26:56.835+09:00  INFO 52387 --- [er @coroutine#2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-12-02T10:26:56.999+09:00  INFO 52387 --- [er @coroutine#2] o.h.b.i.BytecodeProviderInitiator        : HHH000021: Bytecode provider name : bytebuddy
2024-12-02T10:26:57.267+09:00  INFO 52387 --- [er @coroutine#2] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Hibernate: 
    alter table comment 
       modify column created_at  datetime(6)
Hibernate: 
    alter table comment 
       modify column updated_at  datetime(6)
Hibernate: 
    alter table post 
       modify column created_at  datetime(6)
Hibernate: 
    alter table post 
       modify column updated_at  datetime(6)
Hibernate: 
    alter table tag 
       modify column created_at  datetime(6)
Hibernate: 
    alter table tag 
       modify column updated_at  datetime(6)
2024-12-02T10:26:57.583+09:00  INFO 52387 --- [er @coroutine#2] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-12-02T10:26:57.972+09:00  WARN 52387 --- [er @coroutine#2] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-12-02T10:26:58.166+09:00  INFO 52387 --- [er @coroutine#2] c.f.fcboard.service.CommentServiceTest   : Started CommentServiceTest in 2.395 seconds (process running for 5.215)
Hibernate: 
    insert 
    into
        post
        (content,created_at,created_by,title,updated_at,updated_by) 
    values
        (?,?,?,?,?,?)
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    insert 
    into
        comment
        (content,created_at,created_by,post_id,updated_at,updated_by) 
    values
        (?,?,?,?,?,?)
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    insert 
    into
        post
        (content,created_at,created_by,title,updated_at,updated_by) 
    values
        (?,?,?,?,?,?)
Hibernate: 
    insert 
    into
        comment
        (content,created_at,created_by,post_id,updated_at,updated_by) 
    values
        (?,?,?,?,?,?)
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    update
        comment 
    set
        content=?,
        created_at=?,
        created_by=?,
        post_id=?,
        updated_at=?,
        updated_by=? 
    where
        id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    insert 
    into
        post
        (content,created_at,created_by,title,updated_at,updated_by) 
    values
        (?,?,?,?,?,?)
Hibernate: 
    insert 
    into
        comment
        (content,created_at,created_by,post_id,updated_at,updated_by) 
    values
        (?,?,?,?,?,?)
Hibernate: 
    insert 
    into
        comment
        (content,created_at,created_by,post_id,updated_at,updated_by) 
    values
        (?,?,?,?,?,?)
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    delete 
    from
        comment 
    where
        id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
]]></system-out>
  <system-err><![CDATA[Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.
]]></system-err>
</testsuite>
